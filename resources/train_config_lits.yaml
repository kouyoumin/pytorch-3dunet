# use a fixed random seed to guarantee that when you run the code twice you will get the same outcome
manual_seed: 0
# model configuration
model:
  # model class
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # feature maps scale factor
  f_maps: 16
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
# trainer configuration
trainer:
  # path to the checkpoint directory
  checkpoint_dir: 3dunet
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  #resume: '/home/kouyoumin/hdd/kouyoumin/pytorch-3dunet/3dunet/best_checkpoint.pytorch'
  # how many iterations between validations
  validate_after_iters: 2000
  # how many iterations between tensorboard logging
  log_after_iters: 100
  # max number of epochs
  epochs: 20
  # max number of iterations
  iters: 1000000
  # model with higher eval score is considered better
  eval_score_higher_is_better: True
# optimizer configuration
optimizer:
  # initial learning rate
  learning_rate: 0.1
  # weight decay
  weight_decay: 0.0001
  momentum: 0.9
# loss function configuration
loss:
  # loss function to be used during training
  name: BCEWithLogitsLoss
  #name: CrossEntropyLoss
  # A manual rescaling weight given to each class.
  weight: [1.0, 10.0]
  pos_weight: [3.0]
  # a target value that is ignored and does not contribute to the input gradient
  ignore_index: null
# evaluation metric configuration
eval_metric:
  name: MeanIoU
  # a target label that is ignored during metric evaluation
  ignore_index: null
lr_scheduler:
  name: MultiStepLR
  milestones: [10, 15, 18, 19]
  gamma: 0.1
# data loaders configuration
loaders:
  # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
  train_patch: [64, 224, 224]
  # train stride between patches
  train_stride: [8, 16, 16]
  val_slice_builder: SingleSliceBuilder
  # validation patch (can be bigger than train patch since there is no backprop)
  val_patch: [256, 256, 256]
  # validation stride (validation patches doesn't need to overlap)
  val_stride: [256, 128, 128]
  # path to the raw data within the H5
  raw_internal_path: raw
  # path to the the label data withtin the H5
  label_internal_path: label
  # batch size
  batch_size: 4
  # paths to the training datasets
  train_path:
    - '/home/kouyoumin/Datasets/LITS/Training Batch 2/Full127.h5'
  # paths to the validation datasets
  val_path:
    - '/home/kouyoumin/Datasets/LITS/Training Batch 1/'
  # how many subprocesses to use for data loading
  num_workers: 16
  # data transformations/augmentations
  transformer:
    train:
      raw:
        - name: Standardize
        - name: RandomFlip
        #- name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY only
          axes: [[2, 1]]
          angle_spectrum: 5
          mode: reflect
        - name: ElasticDeformation
          spline_order: 3
        - name: RandomContrast
        #- name: AdditiveGaussianNoise
        #- name: AdditivePoissonNoise
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
        #- name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY only
          axes: [[2, 1]]
          angle_spectrum: 5
          mode: reflect
        - name: ElasticDeformation
          spline_order: 0
        - name: ToTensor
          expand_dims: false
          #dtype: 'long'
    test:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
      label:
        - name: ToTensor
          expand_dims: false
          #dtype: 'long'
